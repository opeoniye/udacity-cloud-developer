# NEWS: Change the name of the org 
org: opeoniye
app: triple-love-news-app
service: triple-love-news

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 256
  lambdaHashingVersion: '20201221'
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    TRIPLE_LOVE_NEWS: TripleLoveNews-${self:provider.stage}
    TRIPLE_LOVE_NEWS_USERID_INDEX: TripleLoveNewsUserIDIndex
    TRIPLE_LOVE_NEWS_NEWSID_INDEX: TripleLoveNewsNewsIDIndex
    TRIPLE_LOVE_NEWS_BUCKET: triple-love-news-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    JWKS_URL: https://opeoniye.us.auth0.com/.well-known/jwks.json

  logs:
    # Enable API Gateway logs
    restApi: true

  tracing:
    lambda: true
    apiGateway: true

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  NewsFeed:
    handler: src/lambda/http/newsFeed.handler
    events:
      - http:
          method: get
          path: news
          cors: true
          #authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRIPLE_LOVE_NEWS}/index/${self:provider.environment.TRIPLE_LOVE_NEWS_NEWSID_INDEX}
      - Effect: Allow
        Action:
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
          - xray:BatchGetTraces
          - xray:GetServiceGraph
          - xray:GetTraceGraph
          - xray:GetTraceSummaries
          - xray:GetGroups
          - xray:GetGroup
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - "*"

  NewsFeedUser:
    handler: src/lambda/http/newsFeedUser.handler
    events:
      - http:
          method: get
          path: news/user
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRIPLE_LOVE_NEWS}/index/${self:provider.environment.TRIPLE_LOVE_NEWS_USERID_INDEX}
      - Effect: Allow
        Action:
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
          - xray:BatchGetTraces
          - xray:GetServiceGraph
          - xray:GetTraceGraph
          - xray:GetTraceSummaries
          - xray:GetGroups
          - xray:GetGroup
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - "*"

  NewsFeedView:
    handler: src/lambda/http/newsFeedView.handler
    events:
      - http:
          method: get
          path: news/{newsId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRIPLE_LOVE_NEWS}
      - Effect: Allow
        Action:
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
          - xray:BatchGetTraces
          - xray:GetServiceGraph
          - xray:GetTraceGraph
          - xray:GetTraceSummaries
          - xray:GetGroups
          - xray:GetGroup
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - "*"

  AddNews:
    handler: src/lambda/http/addNews.handler
    events:
      - http:
          method: post
          path: news
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/add-news-model.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRIPLE_LOVE_NEWS}
      - Effect: Allow
        Action:
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
          - xray:BatchGetTraces
          - xray:GetServiceGraph
          - xray:GetTraceGraph
          - xray:GetTraceSummaries
          - xray:GetGroups
          - xray:GetGroup
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - "*"

  EditNews:
    handler: src/lambda/http/editNews.handler
    events:
      - http:
          method: patch
          path: news/{newsId}
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/edit-news-model.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRIPLE_LOVE_NEWS}
      - Effect: Allow
        Action:
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
          - xray:BatchGetTraces
          - xray:GetServiceGraph
          - xray:GetTraceGraph
          - xray:GetTraceSummaries
          - xray:GetGroups
          - xray:GetGroup
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - "*"

  DeleteNews:
    handler: src/lambda/http/deleteNews.handler
    events:
      - http:
          method: delete
          path: news/{newsId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRIPLE_LOVE_NEWS}
      - Effect: Allow
        Action:
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
          - xray:BatchGetTraces
          - xray:GetServiceGraph
          - xray:GetTraceGraph
          - xray:GetTraceSummaries
          - xray:GetGroups
          - xray:GetGroup
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - "*"

  NewsImageUrl:
    handler: src/lambda/http/newsImageUrl.handler
    events:
      - http:
          method: post
          path: news/{newsId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.TRIPLE_LOVE_NEWS_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRIPLE_LOVE_NEWS}
      - Effect: Allow
        Action:
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
          - xray:BatchGetTraces
          - xray:GetServiceGraph
          - xray:GetTraceGraph
          - xray:GetTraceSummaries
          - xray:GetGroups
          - xray:GetGroup
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - "*"

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    NewsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TRIPLE_LOVE_NEWS}      
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: newsId
            AttributeType: S
          - AttributeName: newsTime
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: newsId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TRIPLE_LOVE_NEWS_USERID_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: newsTime
                KeyType: RANGE              
            Projection:
              ProjectionType: ALL
        GlobalSecondaryIndexes:      
          - IndexName: ${self:provider.environment.TRIPLE_LOVE_NEWS_NEWSID_INDEX}
            KeySchema:
              - AttributeName: newsId
                KeyType: HASH
              - AttributeName: newsTime
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    NewsImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.TRIPLE_LOVE_NEWS_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000      

    NewsImagesBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: arn:aws:s3:::${self:provider.environment.TRIPLE_LOVE_NEWS_BUCKET}/*
        Bucket: !Ref NewsImagesBucket